// Code generated from parser/Vlang.g4 by ANTLR 4.13.2. DO NOT EDIT.

package compiler

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type VlangLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var VlangLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func vlanglexerLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'println'", "'print'", "'fn'", "'struct'", "'int'", "'float'",
		"'f64'", "'string'", "'bool'", "'char'", "'void'", "'len'", "'cap'",
		"'append'", "'mut'", "", "", "", "", "", "", "", "'if'", "'else'", "'while'",
		"'for'", "'in'", "'return'", "'break'", "'continue'", "", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'!'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='",
		"'>'", "'>='", "'='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='",
		"'%='", "':'", "'('", "')'", "'['", "'{'", "']'", "'}'", "'.'", "','",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "LEN", "CAP", "APPEND",
		"MUT", "BOOLEANO", "ENTERO", "FLOAT", "DECIMAL", "CADENA", "CARACTER",
		"STRING_INTERPOLATION", "IF_KW", "ELSE_KW", "WHILE_KW", "FOR_KW", "IN_KW",
		"RETURN_KW", "BREAK_KW", "CONTINUE_KW", "ID", "PLUS", "MINUS", "MUL",
		"DIV", "MOD", "NOT", "OR", "AND", "EQ", "NEQ", "LT", "LE", "GT", "GE",
		"ASSIGN", "INC", "DEC", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN",
		"DIV_ASSIGN", "MOD_ASSIGN", "COLON", "LPAREN", "RPAREN", "LBRACK", "LCOR",
		"RBRACK", "RCOR", "DOT", "COMMA", "WS", "LINE_COMMENT", "BLOCK_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "LEN", "CAP", "APPEND", "MUT", "BOOLEANO", "ENTERO",
		"FLOAT", "DECIMAL", "CADENA", "CARACTER", "STRING_INTERPOLATION", "IF_KW",
		"ELSE_KW", "WHILE_KW", "FOR_KW", "IN_KW", "RETURN_KW", "BREAK_KW", "CONTINUE_KW",
		"ID", "PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT", "OR", "AND", "EQ",
		"NEQ", "LT", "LE", "GT", "GE", "ASSIGN", "INC", "DEC", "PLUS_ASSIGN",
		"MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "COLON", "LPAREN",
		"RPAREN", "LBRACK", "LCOR", "RBRACK", "RCOR", "DOT", "COMMA", "WS",
		"LINE_COMMENT", "BLOCK_COMMENT",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 65, 457, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7,
		62, 2, 63, 7, 63, 2, 64, 7, 64, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 3, 15, 220, 8, 15, 1, 16, 4, 16, 223, 8, 16, 11, 16, 12,
		16, 224, 1, 17, 4, 17, 228, 8, 17, 11, 17, 12, 17, 229, 1, 17, 1, 17, 5,
		17, 234, 8, 17, 10, 17, 12, 17, 237, 9, 17, 1, 17, 5, 17, 240, 8, 17, 10,
		17, 12, 17, 243, 9, 17, 1, 17, 1, 17, 4, 17, 247, 8, 17, 11, 17, 12, 17,
		248, 3, 17, 251, 8, 17, 1, 18, 4, 18, 254, 8, 18, 11, 18, 12, 18, 255,
		1, 18, 1, 18, 4, 18, 260, 8, 18, 11, 18, 12, 18, 261, 1, 19, 1, 19, 1,
		19, 1, 19, 5, 19, 268, 8, 19, 10, 19, 12, 19, 271, 9, 19, 1, 19, 1, 19,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 5, 21, 288, 8, 21, 10, 21, 12, 21, 291, 9, 21, 1, 21,
		5, 21, 294, 8, 21, 10, 21, 12, 21, 297, 9, 21, 1, 21, 1, 21, 1, 22, 1,
		22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1,
		30, 1, 30, 5, 30, 346, 8, 30, 10, 30, 12, 30, 349, 9, 30, 1, 31, 1, 31,
		1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1,
		37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40,
		1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1,
		44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48,
		1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1,
		52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1, 55, 1, 56, 1, 56,
		1, 57, 1, 57, 1, 58, 1, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1,
		62, 4, 62, 427, 8, 62, 11, 62, 12, 62, 428, 1, 62, 1, 62, 1, 63, 1, 63,
		1, 63, 1, 63, 5, 63, 437, 8, 63, 10, 63, 12, 63, 440, 9, 63, 1, 63, 1,
		63, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 448, 8, 64, 10, 64, 12, 64, 451,
		9, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 449, 0, 65, 1, 1, 3, 2, 5,
		3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25,
		13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43,
		22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61,
		31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79,
		40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97,
		49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113,
		57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129,
		65, 1, 0, 9, 1, 0, 48, 57, 2, 0, 34, 34, 92, 92, 3, 0, 34, 34, 36, 36,
		92, 92, 1, 0, 123, 123, 1, 0, 125, 125, 3, 0, 65, 90, 95, 95, 97, 122,
		4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 2,
		0, 10, 10, 13, 13, 476, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0,
		0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1,
		0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21,
		1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0,
		29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0,
		0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0,
		0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0,
		0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1,
		0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67,
		1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0,
		75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0,
		0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0,
		0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0,
		0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105,
		1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0,
		0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1,
		0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0,
		127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 1, 131, 1, 0, 0, 0, 3, 139, 1, 0,
		0, 0, 5, 145, 1, 0, 0, 0, 7, 148, 1, 0, 0, 0, 9, 155, 1, 0, 0, 0, 11, 159,
		1, 0, 0, 0, 13, 165, 1, 0, 0, 0, 15, 169, 1, 0, 0, 0, 17, 176, 1, 0, 0,
		0, 19, 181, 1, 0, 0, 0, 21, 186, 1, 0, 0, 0, 23, 191, 1, 0, 0, 0, 25, 195,
		1, 0, 0, 0, 27, 199, 1, 0, 0, 0, 29, 206, 1, 0, 0, 0, 31, 219, 1, 0, 0,
		0, 33, 222, 1, 0, 0, 0, 35, 250, 1, 0, 0, 0, 37, 253, 1, 0, 0, 0, 39, 263,
		1, 0, 0, 0, 41, 274, 1, 0, 0, 0, 43, 278, 1, 0, 0, 0, 45, 300, 1, 0, 0,
		0, 47, 303, 1, 0, 0, 0, 49, 308, 1, 0, 0, 0, 51, 314, 1, 0, 0, 0, 53, 318,
		1, 0, 0, 0, 55, 321, 1, 0, 0, 0, 57, 328, 1, 0, 0, 0, 59, 334, 1, 0, 0,
		0, 61, 343, 1, 0, 0, 0, 63, 350, 1, 0, 0, 0, 65, 352, 1, 0, 0, 0, 67, 354,
		1, 0, 0, 0, 69, 356, 1, 0, 0, 0, 71, 358, 1, 0, 0, 0, 73, 360, 1, 0, 0,
		0, 75, 362, 1, 0, 0, 0, 77, 365, 1, 0, 0, 0, 79, 368, 1, 0, 0, 0, 81, 371,
		1, 0, 0, 0, 83, 374, 1, 0, 0, 0, 85, 376, 1, 0, 0, 0, 87, 379, 1, 0, 0,
		0, 89, 381, 1, 0, 0, 0, 91, 384, 1, 0, 0, 0, 93, 386, 1, 0, 0, 0, 95, 389,
		1, 0, 0, 0, 97, 392, 1, 0, 0, 0, 99, 395, 1, 0, 0, 0, 101, 398, 1, 0, 0,
		0, 103, 401, 1, 0, 0, 0, 105, 404, 1, 0, 0, 0, 107, 407, 1, 0, 0, 0, 109,
		409, 1, 0, 0, 0, 111, 411, 1, 0, 0, 0, 113, 413, 1, 0, 0, 0, 115, 415,
		1, 0, 0, 0, 117, 417, 1, 0, 0, 0, 119, 419, 1, 0, 0, 0, 121, 421, 1, 0,
		0, 0, 123, 423, 1, 0, 0, 0, 125, 426, 1, 0, 0, 0, 127, 432, 1, 0, 0, 0,
		129, 443, 1, 0, 0, 0, 131, 132, 5, 112, 0, 0, 132, 133, 5, 114, 0, 0, 133,
		134, 5, 105, 0, 0, 134, 135, 5, 110, 0, 0, 135, 136, 5, 116, 0, 0, 136,
		137, 5, 108, 0, 0, 137, 138, 5, 110, 0, 0, 138, 2, 1, 0, 0, 0, 139, 140,
		5, 112, 0, 0, 140, 141, 5, 114, 0, 0, 141, 142, 5, 105, 0, 0, 142, 143,
		5, 110, 0, 0, 143, 144, 5, 116, 0, 0, 144, 4, 1, 0, 0, 0, 145, 146, 5,
		102, 0, 0, 146, 147, 5, 110, 0, 0, 147, 6, 1, 0, 0, 0, 148, 149, 5, 115,
		0, 0, 149, 150, 5, 116, 0, 0, 150, 151, 5, 114, 0, 0, 151, 152, 5, 117,
		0, 0, 152, 153, 5, 99, 0, 0, 153, 154, 5, 116, 0, 0, 154, 8, 1, 0, 0, 0,
		155, 156, 5, 105, 0, 0, 156, 157, 5, 110, 0, 0, 157, 158, 5, 116, 0, 0,
		158, 10, 1, 0, 0, 0, 159, 160, 5, 102, 0, 0, 160, 161, 5, 108, 0, 0, 161,
		162, 5, 111, 0, 0, 162, 163, 5, 97, 0, 0, 163, 164, 5, 116, 0, 0, 164,
		12, 1, 0, 0, 0, 165, 166, 5, 102, 0, 0, 166, 167, 5, 54, 0, 0, 167, 168,
		5, 52, 0, 0, 168, 14, 1, 0, 0, 0, 169, 170, 5, 115, 0, 0, 170, 171, 5,
		116, 0, 0, 171, 172, 5, 114, 0, 0, 172, 173, 5, 105, 0, 0, 173, 174, 5,
		110, 0, 0, 174, 175, 5, 103, 0, 0, 175, 16, 1, 0, 0, 0, 176, 177, 5, 98,
		0, 0, 177, 178, 5, 111, 0, 0, 178, 179, 5, 111, 0, 0, 179, 180, 5, 108,
		0, 0, 180, 18, 1, 0, 0, 0, 181, 182, 5, 99, 0, 0, 182, 183, 5, 104, 0,
		0, 183, 184, 5, 97, 0, 0, 184, 185, 5, 114, 0, 0, 185, 20, 1, 0, 0, 0,
		186, 187, 5, 118, 0, 0, 187, 188, 5, 111, 0, 0, 188, 189, 5, 105, 0, 0,
		189, 190, 5, 100, 0, 0, 190, 22, 1, 0, 0, 0, 191, 192, 5, 108, 0, 0, 192,
		193, 5, 101, 0, 0, 193, 194, 5, 110, 0, 0, 194, 24, 1, 0, 0, 0, 195, 196,
		5, 99, 0, 0, 196, 197, 5, 97, 0, 0, 197, 198, 5, 112, 0, 0, 198, 26, 1,
		0, 0, 0, 199, 200, 5, 97, 0, 0, 200, 201, 5, 112, 0, 0, 201, 202, 5, 112,
		0, 0, 202, 203, 5, 101, 0, 0, 203, 204, 5, 110, 0, 0, 204, 205, 5, 100,
		0, 0, 205, 28, 1, 0, 0, 0, 206, 207, 5, 109, 0, 0, 207, 208, 5, 117, 0,
		0, 208, 209, 5, 116, 0, 0, 209, 30, 1, 0, 0, 0, 210, 211, 5, 116, 0, 0,
		211, 212, 5, 114, 0, 0, 212, 213, 5, 117, 0, 0, 213, 220, 5, 101, 0, 0,
		214, 215, 5, 102, 0, 0, 215, 216, 5, 97, 0, 0, 216, 217, 5, 108, 0, 0,
		217, 218, 5, 115, 0, 0, 218, 220, 5, 101, 0, 0, 219, 210, 1, 0, 0, 0, 219,
		214, 1, 0, 0, 0, 220, 32, 1, 0, 0, 0, 221, 223, 7, 0, 0, 0, 222, 221, 1,
		0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0,
		0, 225, 34, 1, 0, 0, 0, 226, 228, 7, 0, 0, 0, 227, 226, 1, 0, 0, 0, 228,
		229, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230, 231,
		1, 0, 0, 0, 231, 235, 5, 46, 0, 0, 232, 234, 7, 0, 0, 0, 233, 232, 1, 0,
		0, 0, 234, 237, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0,
		236, 251, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 238, 240, 7, 0, 0, 0, 239,
		238, 1, 0, 0, 0, 240, 243, 1, 0, 0, 0, 241, 239, 1, 0, 0, 0, 241, 242,
		1, 0, 0, 0, 242, 244, 1, 0, 0, 0, 243, 241, 1, 0, 0, 0, 244, 246, 5, 46,
		0, 0, 245, 247, 7, 0, 0, 0, 246, 245, 1, 0, 0, 0, 247, 248, 1, 0, 0, 0,
		248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 251, 1, 0, 0, 0, 250,
		227, 1, 0, 0, 0, 250, 241, 1, 0, 0, 0, 251, 36, 1, 0, 0, 0, 252, 254, 7,
		0, 0, 0, 253, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0, 255, 253, 1, 0, 0,
		0, 255, 256, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 259, 5, 46, 0, 0, 258,
		260, 7, 0, 0, 0, 259, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 259,
		1, 0, 0, 0, 261, 262, 1, 0, 0, 0, 262, 38, 1, 0, 0, 0, 263, 269, 5, 34,
		0, 0, 264, 268, 8, 1, 0, 0, 265, 266, 5, 92, 0, 0, 266, 268, 9, 0, 0, 0,
		267, 264, 1, 0, 0, 0, 267, 265, 1, 0, 0, 0, 268, 271, 1, 0, 0, 0, 269,
		267, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 272, 1, 0, 0, 0, 271, 269,
		1, 0, 0, 0, 272, 273, 5, 34, 0, 0, 273, 40, 1, 0, 0, 0, 274, 275, 5, 39,
		0, 0, 275, 276, 9, 0, 0, 0, 276, 277, 5, 39, 0, 0, 277, 42, 1, 0, 0, 0,
		278, 295, 5, 34, 0, 0, 279, 294, 8, 2, 0, 0, 280, 281, 5, 92, 0, 0, 281,
		294, 9, 0, 0, 0, 282, 283, 5, 36, 0, 0, 283, 294, 8, 3, 0, 0, 284, 285,
		5, 36, 0, 0, 285, 289, 5, 123, 0, 0, 286, 288, 8, 4, 0, 0, 287, 286, 1,
		0, 0, 0, 288, 291, 1, 0, 0, 0, 289, 287, 1, 0, 0, 0, 289, 290, 1, 0, 0,
		0, 290, 292, 1, 0, 0, 0, 291, 289, 1, 0, 0, 0, 292, 294, 5, 125, 0, 0,
		293, 279, 1, 0, 0, 0, 293, 280, 1, 0, 0, 0, 293, 282, 1, 0, 0, 0, 293,
		284, 1, 0, 0, 0, 294, 297, 1, 0, 0, 0, 295, 293, 1, 0, 0, 0, 295, 296,
		1, 0, 0, 0, 296, 298, 1, 0, 0, 0, 297, 295, 1, 0, 0, 0, 298, 299, 5, 34,
		0, 0, 299, 44, 1, 0, 0, 0, 300, 301, 5, 105, 0, 0, 301, 302, 5, 102, 0,
		0, 302, 46, 1, 0, 0, 0, 303, 304, 5, 101, 0, 0, 304, 305, 5, 108, 0, 0,
		305, 306, 5, 115, 0, 0, 306, 307, 5, 101, 0, 0, 307, 48, 1, 0, 0, 0, 308,
		309, 5, 119, 0, 0, 309, 310, 5, 104, 0, 0, 310, 311, 5, 105, 0, 0, 311,
		312, 5, 108, 0, 0, 312, 313, 5, 101, 0, 0, 313, 50, 1, 0, 0, 0, 314, 315,
		5, 102, 0, 0, 315, 316, 5, 111, 0, 0, 316, 317, 5, 114, 0, 0, 317, 52,
		1, 0, 0, 0, 318, 319, 5, 105, 0, 0, 319, 320, 5, 110, 0, 0, 320, 54, 1,
		0, 0, 0, 321, 322, 5, 114, 0, 0, 322, 323, 5, 101, 0, 0, 323, 324, 5, 116,
		0, 0, 324, 325, 5, 117, 0, 0, 325, 326, 5, 114, 0, 0, 326, 327, 5, 110,
		0, 0, 327, 56, 1, 0, 0, 0, 328, 329, 5, 98, 0, 0, 329, 330, 5, 114, 0,
		0, 330, 331, 5, 101, 0, 0, 331, 332, 5, 97, 0, 0, 332, 333, 5, 107, 0,
		0, 333, 58, 1, 0, 0, 0, 334, 335, 5, 99, 0, 0, 335, 336, 5, 111, 0, 0,
		336, 337, 5, 110, 0, 0, 337, 338, 5, 116, 0, 0, 338, 339, 5, 105, 0, 0,
		339, 340, 5, 110, 0, 0, 340, 341, 5, 117, 0, 0, 341, 342, 5, 101, 0, 0,
		342, 60, 1, 0, 0, 0, 343, 347, 7, 5, 0, 0, 344, 346, 7, 6, 0, 0, 345, 344,
		1, 0, 0, 0, 346, 349, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 347, 348, 1, 0,
		0, 0, 348, 62, 1, 0, 0, 0, 349, 347, 1, 0, 0, 0, 350, 351, 5, 43, 0, 0,
		351, 64, 1, 0, 0, 0, 352, 353, 5, 45, 0, 0, 353, 66, 1, 0, 0, 0, 354, 355,
		5, 42, 0, 0, 355, 68, 1, 0, 0, 0, 356, 357, 5, 47, 0, 0, 357, 70, 1, 0,
		0, 0, 358, 359, 5, 37, 0, 0, 359, 72, 1, 0, 0, 0, 360, 361, 5, 33, 0, 0,
		361, 74, 1, 0, 0, 0, 362, 363, 5, 124, 0, 0, 363, 364, 5, 124, 0, 0, 364,
		76, 1, 0, 0, 0, 365, 366, 5, 38, 0, 0, 366, 367, 5, 38, 0, 0, 367, 78,
		1, 0, 0, 0, 368, 369, 5, 61, 0, 0, 369, 370, 5, 61, 0, 0, 370, 80, 1, 0,
		0, 0, 371, 372, 5, 33, 0, 0, 372, 373, 5, 61, 0, 0, 373, 82, 1, 0, 0, 0,
		374, 375, 5, 60, 0, 0, 375, 84, 1, 0, 0, 0, 376, 377, 5, 60, 0, 0, 377,
		378, 5, 61, 0, 0, 378, 86, 1, 0, 0, 0, 379, 380, 5, 62, 0, 0, 380, 88,
		1, 0, 0, 0, 381, 382, 5, 62, 0, 0, 382, 383, 5, 61, 0, 0, 383, 90, 1, 0,
		0, 0, 384, 385, 5, 61, 0, 0, 385, 92, 1, 0, 0, 0, 386, 387, 5, 43, 0, 0,
		387, 388, 5, 43, 0, 0, 388, 94, 1, 0, 0, 0, 389, 390, 5, 45, 0, 0, 390,
		391, 5, 45, 0, 0, 391, 96, 1, 0, 0, 0, 392, 393, 5, 43, 0, 0, 393, 394,
		5, 61, 0, 0, 394, 98, 1, 0, 0, 0, 395, 396, 5, 45, 0, 0, 396, 397, 5, 61,
		0, 0, 397, 100, 1, 0, 0, 0, 398, 399, 5, 42, 0, 0, 399, 400, 5, 61, 0,
		0, 400, 102, 1, 0, 0, 0, 401, 402, 5, 47, 0, 0, 402, 403, 5, 61, 0, 0,
		403, 104, 1, 0, 0, 0, 404, 405, 5, 37, 0, 0, 405, 406, 5, 61, 0, 0, 406,
		106, 1, 0, 0, 0, 407, 408, 5, 58, 0, 0, 408, 108, 1, 0, 0, 0, 409, 410,
		5, 40, 0, 0, 410, 110, 1, 0, 0, 0, 411, 412, 5, 41, 0, 0, 412, 112, 1,
		0, 0, 0, 413, 414, 5, 91, 0, 0, 414, 114, 1, 0, 0, 0, 415, 416, 5, 123,
		0, 0, 416, 116, 1, 0, 0, 0, 417, 418, 5, 93, 0, 0, 418, 118, 1, 0, 0, 0,
		419, 420, 5, 125, 0, 0, 420, 120, 1, 0, 0, 0, 421, 422, 5, 46, 0, 0, 422,
		122, 1, 0, 0, 0, 423, 424, 5, 44, 0, 0, 424, 124, 1, 0, 0, 0, 425, 427,
		7, 7, 0, 0, 426, 425, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 426, 1, 0,
		0, 0, 428, 429, 1, 0, 0, 0, 429, 430, 1, 0, 0, 0, 430, 431, 6, 62, 0, 0,
		431, 126, 1, 0, 0, 0, 432, 433, 5, 47, 0, 0, 433, 434, 5, 47, 0, 0, 434,
		438, 1, 0, 0, 0, 435, 437, 8, 8, 0, 0, 436, 435, 1, 0, 0, 0, 437, 440,
		1, 0, 0, 0, 438, 436, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439, 441, 1, 0,
		0, 0, 440, 438, 1, 0, 0, 0, 441, 442, 6, 63, 0, 0, 442, 128, 1, 0, 0, 0,
		443, 444, 5, 47, 0, 0, 444, 445, 5, 42, 0, 0, 445, 449, 1, 0, 0, 0, 446,
		448, 9, 0, 0, 0, 447, 446, 1, 0, 0, 0, 448, 451, 1, 0, 0, 0, 449, 450,
		1, 0, 0, 0, 449, 447, 1, 0, 0, 0, 450, 452, 1, 0, 0, 0, 451, 449, 1, 0,
		0, 0, 452, 453, 5, 42, 0, 0, 453, 454, 5, 47, 0, 0, 454, 455, 1, 0, 0,
		0, 455, 456, 6, 64, 0, 0, 456, 130, 1, 0, 0, 0, 19, 0, 219, 224, 229, 235,
		241, 248, 250, 255, 261, 267, 269, 289, 293, 295, 347, 428, 438, 449, 1,
		6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// VlangLexerInit initializes any static state used to implement VlangLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewVlangLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func VlangLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.once.Do(vlanglexerLexerInit)
}

// NewVlangLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewVlangLexer(input antlr.CharStream) *VlangLexer {
	VlangLexerInit()
	l := new(VlangLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &VlangLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Vlang.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// VlangLexer tokens.
const (
	VlangLexerT__0                 = 1
	VlangLexerT__1                 = 2
	VlangLexerT__2                 = 3
	VlangLexerT__3                 = 4
	VlangLexerT__4                 = 5
	VlangLexerT__5                 = 6
	VlangLexerT__6                 = 7
	VlangLexerT__7                 = 8
	VlangLexerT__8                 = 9
	VlangLexerT__9                 = 10
	VlangLexerT__10                = 11
	VlangLexerLEN                  = 12
	VlangLexerCAP                  = 13
	VlangLexerAPPEND               = 14
	VlangLexerMUT                  = 15
	VlangLexerBOOLEANO             = 16
	VlangLexerENTERO               = 17
	VlangLexerFLOAT                = 18
	VlangLexerDECIMAL              = 19
	VlangLexerCADENA               = 20
	VlangLexerCARACTER             = 21
	VlangLexerSTRING_INTERPOLATION = 22
	VlangLexerIF_KW                = 23
	VlangLexerELSE_KW              = 24
	VlangLexerWHILE_KW             = 25
	VlangLexerFOR_KW               = 26
	VlangLexerIN_KW                = 27
	VlangLexerRETURN_KW            = 28
	VlangLexerBREAK_KW             = 29
	VlangLexerCONTINUE_KW          = 30
	VlangLexerID                   = 31
	VlangLexerPLUS                 = 32
	VlangLexerMINUS                = 33
	VlangLexerMUL                  = 34
	VlangLexerDIV                  = 35
	VlangLexerMOD                  = 36
	VlangLexerNOT                  = 37
	VlangLexerOR                   = 38
	VlangLexerAND                  = 39
	VlangLexerEQ                   = 40
	VlangLexerNEQ                  = 41
	VlangLexerLT                   = 42
	VlangLexerLE                   = 43
	VlangLexerGT                   = 44
	VlangLexerGE                   = 45
	VlangLexerASSIGN               = 46
	VlangLexerINC                  = 47
	VlangLexerDEC                  = 48
	VlangLexerPLUS_ASSIGN          = 49
	VlangLexerMINUS_ASSIGN         = 50
	VlangLexerMUL_ASSIGN           = 51
	VlangLexerDIV_ASSIGN           = 52
	VlangLexerMOD_ASSIGN           = 53
	VlangLexerCOLON                = 54
	VlangLexerLPAREN               = 55
	VlangLexerRPAREN               = 56
	VlangLexerLBRACK               = 57
	VlangLexerLCOR                 = 58
	VlangLexerRBRACK               = 59
	VlangLexerRCOR                 = 60
	VlangLexerDOT                  = 61
	VlangLexerCOMMA                = 62
	VlangLexerWS                   = 63
	VlangLexerLINE_COMMENT         = 64
	VlangLexerBLOCK_COMMENT        = 65
)
